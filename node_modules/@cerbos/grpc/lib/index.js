"use strict";
/**
 * Client library for interacting with the Cerbos policy decision point over gRPC from server-side Node.js applications.
 *
 * @packageDocumentation
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.GRPC = void 0;
const core_1 = require("@cerbos/core");
const grpc_js_1 = require("@grpc/grpc-js");
const svc_1 = require("./protobuf/cerbos/svc/v1/svc");
// eslint-disable-next-line @typescript-eslint/no-var-requires -- Can't import package.json because it is outside of the project's rootDir
const { version } = require("../package.json");
/**
 * A client for interacting with the Cerbos policy decision point server over gRPC.
 *
 * @remarks
 * Not supported in browsers.
 *
 * See {@link @cerbos/core#Client | the parent class} for available methods.
 *
 * @public
 */
class GRPC extends core_1.Client {
    /**
     * Create a client for interacting with the Cerbos policy decision point (PDP) server over gRPC.
     *
     * @param target - Cerbos PDP server address (`"host"`, `"host:port"`, or `"unix:/path/to/socket"`).
     * @param options - additional client settings.
     *
     * @example
     * Connect via TCP with no encryption:
     *
     * ```typescript
     * const cerbos = new GRPC("localhost:3593", { tls: false });
     * ```
     *
     * @example
     * Connect via a Unix socket with no encryption:
     *
     * ```typescript
     * const cerbos = new GRPC("unix:/var/run/cerbos.grpc.sock", { tls: false });
     * ```
     *
     * @example
     * Connect to the hosted demo PDP to experiment {@link https://play.cerbos.dev | in the playground}:
     *
     * ```typescript
     * const cerbos = new GRPC("demo-pdp.cerbos.cloud", { tls: true, playgroundInstance: "gE623b0180QlsG5a4QIN6UOZ6f3iSFW2" });
     * ```
     */
    constructor(target, options) {
        const client = new grpc_js_1.Client(target, credentials(options), {
            "grpc.primary_user_agent": `cerbos-sdk-javascript-grpc/${version}`,
        });
        const transport = (rpc, request) => {
            const { path, requestSerialize, responseDeserialize } = svc_1.CerbosServiceService[rpc]; // https://github.com/microsoft/TypeScript/issues/30581
            return new Promise((resolve, reject) => {
                client.makeUnaryRequest(path, requestSerialize, responseDeserialize, request, (error, response) => {
                    if (error) {
                        reject(new core_1.NotOK((error.code || core_1.Status.UNKNOWN), error.details));
                    }
                    else if (!response) {
                        reject(new core_1.NotOK(core_1.Status.UNKNOWN, "No response received"));
                    }
                    else {
                        resolve(response);
                    }
                });
            });
        };
        super(transport, options);
        this.client = client;
    }
    /**
     * Disconnect from the Cerbos policy decision point server and clean up resources.
     *
     * @remarks
     * It is safe to call `close` more than once.
     *
     * Any interactions with the server after calling `close` will throw an error.
     */
    close() {
        this.client.close();
    }
}
exports.GRPC = GRPC;
const credentials = ({ playgroundInstance, tls, }) => {
    if (!tls) {
        if (playgroundInstance) {
            throw new Error("TLS is required when connecting to a playground instance");
        }
        return grpc_js_1.ChannelCredentials.createInsecure();
    }
    let channelCredentials;
    if (tls === true) {
        channelCredentials = grpc_js_1.ChannelCredentials.createSsl();
    }
    else {
        channelCredentials = grpc_js_1.ChannelCredentials.createFromSecureContext(tls);
    }
    if (playgroundInstance) {
        return channelCredentials.compose(callCredentials(playgroundInstance));
    }
    return channelCredentials;
};
const callCredentials = (playgroundInstance) => grpc_js_1.CallCredentials.createFromMetadataGenerator((_, callback) => {
    const metadata = new grpc_js_1.Metadata();
    metadata.set("playground-instance", playgroundInstance);
    callback(null, metadata);
});
//# sourceMappingURL=index.js.map