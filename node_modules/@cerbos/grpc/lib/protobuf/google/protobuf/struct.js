"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListValue = exports.Value = exports.Struct_FieldsEntry = exports.Struct = exports.NullValue = exports.protobufPackage = void 0;
/* eslint-disable */
const _m0 = __importStar(require("protobufjs/minimal"));
exports.protobufPackage = "google.protobuf";
/**
 * `NullValue` is a singleton enumeration to represent the null value for the
 * `Value` type union.
 *
 *  The JSON representation for `NullValue` is JSON `null`.
 */
var NullValue;
(function (NullValue) {
    /** NULL_VALUE - Null value. */
    NullValue[NullValue["NULL_VALUE"] = 0] = "NULL_VALUE";
})(NullValue = exports.NullValue || (exports.NullValue = {}));
function createBaseStruct() {
    return { fields: {} };
}
exports.Struct = {
    encode(message, writer = _m0.Writer.create()) {
        Object.entries(message.fields).forEach(([key, value]) => {
            if (value !== undefined) {
                exports.Struct_FieldsEntry.encode({ key: key, value }, writer.uint32(10).fork()).ldelim();
            }
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStruct();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    const entry1 = exports.Struct_FieldsEntry.decode(reader, reader.uint32());
                    if (entry1.value !== undefined) {
                        message.fields[entry1.key] = entry1.value;
                    }
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    wrap(object) {
        const struct = createBaseStruct();
        if (object !== undefined) {
            Object.keys(object).forEach((key) => {
                struct.fields[key] = object[key];
            });
        }
        return struct;
    },
    unwrap(message) {
        const object = {};
        Object.keys(message.fields).forEach((key) => {
            object[key] = message.fields[key];
        });
        return object;
    },
};
function createBaseStruct_FieldsEntry() {
    return { key: "", value: undefined };
}
exports.Struct_FieldsEntry = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            exports.Value.encode(exports.Value.wrap(message.value), writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStruct_FieldsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = exports.Value.unwrap(exports.Value.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
};
function createBaseValue() {
    return { kind: undefined };
}
exports.Value = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.kind?.$case === "nullValue") {
            writer.uint32(8).int32(message.kind.nullValue);
        }
        if (message.kind?.$case === "numberValue") {
            writer.uint32(17).double(message.kind.numberValue);
        }
        if (message.kind?.$case === "stringValue") {
            writer.uint32(26).string(message.kind.stringValue);
        }
        if (message.kind?.$case === "boolValue") {
            writer.uint32(32).bool(message.kind.boolValue);
        }
        if (message.kind?.$case === "structValue") {
            exports.Struct.encode(exports.Struct.wrap(message.kind.structValue), writer.uint32(42).fork()).ldelim();
        }
        if (message.kind?.$case === "listValue") {
            exports.ListValue.encode(exports.ListValue.wrap(message.kind.listValue), writer.uint32(50).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseValue();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.kind = {
                        $case: "nullValue",
                        nullValue: reader.int32(),
                    };
                    break;
                case 2:
                    message.kind = { $case: "numberValue", numberValue: reader.double() };
                    break;
                case 3:
                    message.kind = { $case: "stringValue", stringValue: reader.string() };
                    break;
                case 4:
                    message.kind = { $case: "boolValue", boolValue: reader.bool() };
                    break;
                case 5:
                    message.kind = {
                        $case: "structValue",
                        structValue: exports.Struct.unwrap(exports.Struct.decode(reader, reader.uint32())),
                    };
                    break;
                case 6:
                    message.kind = {
                        $case: "listValue",
                        listValue: exports.ListValue.unwrap(exports.ListValue.decode(reader, reader.uint32())),
                    };
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    wrap(value) {
        const result = createBaseValue();
        if (value === null) {
            result.kind = { $case: "nullValue", nullValue: NullValue.NULL_VALUE };
        }
        else if (typeof value === "boolean") {
            result.kind = { $case: "boolValue", boolValue: value };
        }
        else if (typeof value === "number") {
            result.kind = { $case: "numberValue", numberValue: value };
        }
        else if (typeof value === "string") {
            result.kind = { $case: "stringValue", stringValue: value };
        }
        else if (Array.isArray(value)) {
            result.kind = { $case: "listValue", listValue: value };
        }
        else if (typeof value === "object") {
            result.kind = { $case: "structValue", structValue: value };
        }
        else if (typeof value !== "undefined") {
            throw new Error("Unsupported any value type: " + typeof value);
        }
        return result;
    },
    unwrap(message) {
        if (message.kind?.$case === "nullValue") {
            return null;
        }
        else if (message.kind?.$case === "numberValue") {
            return message.kind?.numberValue;
        }
        else if (message.kind?.$case === "stringValue") {
            return message.kind?.stringValue;
        }
        else if (message.kind?.$case === "boolValue") {
            return message.kind?.boolValue;
        }
        else if (message.kind?.$case === "structValue") {
            return message.kind?.structValue;
        }
        else if (message.kind?.$case === "listValue") {
            return message.kind?.listValue;
        }
        else {
            return undefined;
        }
    },
};
function createBaseListValue() {
    return { values: [] };
}
exports.ListValue = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.values) {
            exports.Value.encode(exports.Value.wrap(v), writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListValue();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.values.push(exports.Value.unwrap(exports.Value.decode(reader, reader.uint32())));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    wrap(value) {
        const result = createBaseListValue();
        result.values = value ?? [];
        return result;
    },
    unwrap(message) {
        return message.values;
    },
};
//# sourceMappingURL=struct.js.map