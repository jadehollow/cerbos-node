import { Effect } from "../../../cerbos/effect/v1/effect";
import { PlanResourcesFilter } from "../../../cerbos/engine/v1/engine";
import { ValidationError, Schema } from "../../../cerbos/schema/v1/schema";
import { TestResults, Policy } from "../../../cerbos/policy/v1/policy";
import { Empty } from "../../../google/protobuf/empty";
import { AccessLogEntry, DecisionLogEntry } from "../../../cerbos/audit/v1/audit";
import * as _m0 from "protobufjs/minimal";
export declare const protobufPackage = "cerbos.response.v1";
export interface PlanResourcesResponse {
    requestId: string;
    action: string;
    resourceKind: string;
    policyVersion: string;
    filter: PlanResourcesFilter | undefined;
    meta: PlanResourcesResponse_Meta | undefined;
    validationErrors: ValidationError[];
}
export interface PlanResourcesResponse_Meta {
    filterDebug: string;
    matchedScope: string;
}
/** Deprecated. See CheckResourcesResponse. */
export interface CheckResourceSetResponse {
    requestId: string;
    resourceInstances: {
        [key: string]: CheckResourceSetResponse_ActionEffectMap;
    };
    meta: CheckResourceSetResponse_Meta | undefined;
}
export interface CheckResourceSetResponse_ActionEffectMap {
    actions: {
        [key: string]: Effect;
    };
    validationErrors: ValidationError[];
}
export interface CheckResourceSetResponse_ActionEffectMap_ActionsEntry {
    key: string;
    value: Effect;
}
export interface CheckResourceSetResponse_Meta {
    resourceInstances: {
        [key: string]: CheckResourceSetResponse_Meta_ActionMeta;
    };
}
export interface CheckResourceSetResponse_Meta_EffectMeta {
    matchedPolicy: string;
    matchedScope: string;
}
export interface CheckResourceSetResponse_Meta_ActionMeta {
    actions: {
        [key: string]: CheckResourceSetResponse_Meta_EffectMeta;
    };
    effectiveDerivedRoles: string[];
}
export interface CheckResourceSetResponse_Meta_ActionMeta_ActionsEntry {
    key: string;
    value: CheckResourceSetResponse_Meta_EffectMeta | undefined;
}
export interface CheckResourceSetResponse_Meta_ResourceInstancesEntry {
    key: string;
    value: CheckResourceSetResponse_Meta_ActionMeta | undefined;
}
export interface CheckResourceSetResponse_ResourceInstancesEntry {
    key: string;
    value: CheckResourceSetResponse_ActionEffectMap | undefined;
}
/** Deprecated. See CheckResourcesResponse. */
export interface CheckResourceBatchResponse {
    requestId: string;
    results: CheckResourceBatchResponse_ActionEffectMap[];
}
export interface CheckResourceBatchResponse_ActionEffectMap {
    resourceId: string;
    actions: {
        [key: string]: Effect;
    };
    validationErrors: ValidationError[];
}
export interface CheckResourceBatchResponse_ActionEffectMap_ActionsEntry {
    key: string;
    value: Effect;
}
export interface CheckResourcesResponse {
    requestId: string;
    results: CheckResourcesResponse_ResultEntry[];
}
export interface CheckResourcesResponse_ResultEntry {
    resource: CheckResourcesResponse_ResultEntry_Resource | undefined;
    actions: {
        [key: string]: Effect;
    };
    validationErrors: ValidationError[];
    meta: CheckResourcesResponse_ResultEntry_Meta | undefined;
}
export interface CheckResourcesResponse_ResultEntry_Resource {
    id: string;
    kind: string;
    policyVersion: string;
    scope: string;
}
export interface CheckResourcesResponse_ResultEntry_Meta {
    actions: {
        [key: string]: CheckResourcesResponse_ResultEntry_Meta_EffectMeta;
    };
    effectiveDerivedRoles: string[];
}
export interface CheckResourcesResponse_ResultEntry_Meta_EffectMeta {
    matchedPolicy: string;
    matchedScope: string;
}
export interface CheckResourcesResponse_ResultEntry_Meta_ActionsEntry {
    key: string;
    value: CheckResourcesResponse_ResultEntry_Meta_EffectMeta | undefined;
}
export interface CheckResourcesResponse_ResultEntry_ActionsEntry {
    key: string;
    value: Effect;
}
export interface PlaygroundFailure {
    errors: PlaygroundFailure_Error[];
}
export interface PlaygroundFailure_Error {
    file: string;
    error: string;
}
export interface PlaygroundValidateResponse {
    playgroundId: string;
    outcome?: {
        $case: "failure";
        failure: PlaygroundFailure;
    } | {
        $case: "success";
        success: Empty;
    };
}
export interface PlaygroundTestResponse {
    playgroundId: string;
    outcome?: {
        $case: "failure";
        failure: PlaygroundFailure;
    } | {
        $case: "success";
        success: PlaygroundTestResponse_TestResults;
    };
}
export interface PlaygroundTestResponse_TestResults {
    results: TestResults | undefined;
}
export interface PlaygroundEvaluateResponse {
    playgroundId: string;
    outcome?: {
        $case: "failure";
        failure: PlaygroundFailure;
    } | {
        $case: "success";
        success: PlaygroundEvaluateResponse_EvalResultList;
    };
}
export interface PlaygroundEvaluateResponse_EvalResult {
    action: string;
    effect: Effect;
    policy: string;
    effectiveDerivedRoles: string[];
    validationErrors: ValidationError[];
}
export interface PlaygroundEvaluateResponse_EvalResultList {
    results: PlaygroundEvaluateResponse_EvalResult[];
}
export interface PlaygroundProxyResponse {
    playgroundId: string;
    outcome?: {
        $case: "failure";
        failure: PlaygroundFailure;
    } | {
        $case: "checkResourceSet";
        checkResourceSet: CheckResourceSetResponse;
    } | {
        $case: "checkResourceBatch";
        checkResourceBatch: CheckResourceBatchResponse;
    } | {
        $case: "planResources";
        planResources: PlanResourcesResponse;
    } | {
        $case: "checkResources";
        checkResources: CheckResourcesResponse;
    };
}
export interface AddOrUpdatePolicyResponse {
    success: Empty | undefined;
}
export interface ListAuditLogEntriesResponse {
    entry?: {
        $case: "accessLogEntry";
        accessLogEntry: AccessLogEntry;
    } | {
        $case: "decisionLogEntry";
        decisionLogEntry: DecisionLogEntry;
    };
}
export interface ServerInfoResponse {
    version: string;
    commit: string;
    buildDate: string;
}
export interface ListPoliciesResponse {
    policyIds: string[];
}
export interface GetPolicyResponse {
    policies: Policy[];
}
export interface AddOrUpdateSchemaResponse {
}
export interface ListSchemasResponse {
    schemaIds: string[];
}
export interface GetSchemaResponse {
    schemas: Schema[];
}
export interface DeleteSchemaResponse {
}
export interface ReloadStoreResponse {
}
export declare const PlanResourcesResponse: {
    encode(message: PlanResourcesResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PlanResourcesResponse;
};
export declare const PlanResourcesResponse_Meta: {
    encode(message: PlanResourcesResponse_Meta, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PlanResourcesResponse_Meta;
};
export declare const CheckResourceSetResponse: {
    encode(message: CheckResourceSetResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CheckResourceSetResponse;
};
export declare const CheckResourceSetResponse_ActionEffectMap: {
    encode(message: CheckResourceSetResponse_ActionEffectMap, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CheckResourceSetResponse_ActionEffectMap;
};
export declare const CheckResourceSetResponse_ActionEffectMap_ActionsEntry: {
    encode(message: CheckResourceSetResponse_ActionEffectMap_ActionsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CheckResourceSetResponse_ActionEffectMap_ActionsEntry;
};
export declare const CheckResourceSetResponse_Meta: {
    encode(message: CheckResourceSetResponse_Meta, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CheckResourceSetResponse_Meta;
};
export declare const CheckResourceSetResponse_Meta_EffectMeta: {
    encode(message: CheckResourceSetResponse_Meta_EffectMeta, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CheckResourceSetResponse_Meta_EffectMeta;
};
export declare const CheckResourceSetResponse_Meta_ActionMeta: {
    encode(message: CheckResourceSetResponse_Meta_ActionMeta, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CheckResourceSetResponse_Meta_ActionMeta;
};
export declare const CheckResourceSetResponse_Meta_ActionMeta_ActionsEntry: {
    encode(message: CheckResourceSetResponse_Meta_ActionMeta_ActionsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CheckResourceSetResponse_Meta_ActionMeta_ActionsEntry;
};
export declare const CheckResourceSetResponse_Meta_ResourceInstancesEntry: {
    encode(message: CheckResourceSetResponse_Meta_ResourceInstancesEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CheckResourceSetResponse_Meta_ResourceInstancesEntry;
};
export declare const CheckResourceSetResponse_ResourceInstancesEntry: {
    encode(message: CheckResourceSetResponse_ResourceInstancesEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CheckResourceSetResponse_ResourceInstancesEntry;
};
export declare const CheckResourceBatchResponse: {
    encode(message: CheckResourceBatchResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CheckResourceBatchResponse;
};
export declare const CheckResourceBatchResponse_ActionEffectMap: {
    encode(message: CheckResourceBatchResponse_ActionEffectMap, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CheckResourceBatchResponse_ActionEffectMap;
};
export declare const CheckResourceBatchResponse_ActionEffectMap_ActionsEntry: {
    encode(message: CheckResourceBatchResponse_ActionEffectMap_ActionsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CheckResourceBatchResponse_ActionEffectMap_ActionsEntry;
};
export declare const CheckResourcesResponse: {
    encode(message: CheckResourcesResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CheckResourcesResponse;
};
export declare const CheckResourcesResponse_ResultEntry: {
    encode(message: CheckResourcesResponse_ResultEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CheckResourcesResponse_ResultEntry;
};
export declare const CheckResourcesResponse_ResultEntry_Resource: {
    encode(message: CheckResourcesResponse_ResultEntry_Resource, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CheckResourcesResponse_ResultEntry_Resource;
};
export declare const CheckResourcesResponse_ResultEntry_Meta: {
    encode(message: CheckResourcesResponse_ResultEntry_Meta, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CheckResourcesResponse_ResultEntry_Meta;
};
export declare const CheckResourcesResponse_ResultEntry_Meta_EffectMeta: {
    encode(message: CheckResourcesResponse_ResultEntry_Meta_EffectMeta, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CheckResourcesResponse_ResultEntry_Meta_EffectMeta;
};
export declare const CheckResourcesResponse_ResultEntry_Meta_ActionsEntry: {
    encode(message: CheckResourcesResponse_ResultEntry_Meta_ActionsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CheckResourcesResponse_ResultEntry_Meta_ActionsEntry;
};
export declare const CheckResourcesResponse_ResultEntry_ActionsEntry: {
    encode(message: CheckResourcesResponse_ResultEntry_ActionsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CheckResourcesResponse_ResultEntry_ActionsEntry;
};
export declare const PlaygroundFailure: {
    encode(message: PlaygroundFailure, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PlaygroundFailure;
};
export declare const PlaygroundFailure_Error: {
    encode(message: PlaygroundFailure_Error, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PlaygroundFailure_Error;
};
export declare const PlaygroundValidateResponse: {
    encode(message: PlaygroundValidateResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PlaygroundValidateResponse;
};
export declare const PlaygroundTestResponse: {
    encode(message: PlaygroundTestResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PlaygroundTestResponse;
};
export declare const PlaygroundTestResponse_TestResults: {
    encode(message: PlaygroundTestResponse_TestResults, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PlaygroundTestResponse_TestResults;
};
export declare const PlaygroundEvaluateResponse: {
    encode(message: PlaygroundEvaluateResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PlaygroundEvaluateResponse;
};
export declare const PlaygroundEvaluateResponse_EvalResult: {
    encode(message: PlaygroundEvaluateResponse_EvalResult, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PlaygroundEvaluateResponse_EvalResult;
};
export declare const PlaygroundEvaluateResponse_EvalResultList: {
    encode(message: PlaygroundEvaluateResponse_EvalResultList, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PlaygroundEvaluateResponse_EvalResultList;
};
export declare const PlaygroundProxyResponse: {
    encode(message: PlaygroundProxyResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PlaygroundProxyResponse;
};
export declare const AddOrUpdatePolicyResponse: {
    encode(message: AddOrUpdatePolicyResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AddOrUpdatePolicyResponse;
};
export declare const ListAuditLogEntriesResponse: {
    encode(message: ListAuditLogEntriesResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ListAuditLogEntriesResponse;
};
export declare const ServerInfoResponse: {
    encode(message: ServerInfoResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ServerInfoResponse;
};
export declare const ListPoliciesResponse: {
    encode(message: ListPoliciesResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ListPoliciesResponse;
};
export declare const GetPolicyResponse: {
    encode(message: GetPolicyResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetPolicyResponse;
};
export declare const AddOrUpdateSchemaResponse: {
    encode(_: AddOrUpdateSchemaResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AddOrUpdateSchemaResponse;
};
export declare const ListSchemasResponse: {
    encode(message: ListSchemasResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ListSchemasResponse;
};
export declare const GetSchemaResponse: {
    encode(message: GetSchemaResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetSchemaResponse;
};
export declare const DeleteSchemaResponse: {
    encode(_: DeleteSchemaResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DeleteSchemaResponse;
};
export declare const ReloadStoreResponse: {
    encode(_: ReloadStoreResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ReloadStoreResponse;
};
//# sourceMappingURL=response.d.ts.map