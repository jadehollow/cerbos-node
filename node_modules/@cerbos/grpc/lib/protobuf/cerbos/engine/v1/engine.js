"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Trace_Event = exports.Trace_Component_Variable = exports.Trace_Component = exports.Trace = exports.AuxData_JwtEntry = exports.AuxData = exports.Principal_AttrEntry = exports.Principal = exports.Resource_AttrEntry = exports.Resource = exports.CheckOutput_ActionsEntry = exports.CheckOutput_ActionEffect = exports.CheckOutput = exports.CheckInput = exports.PlanResourcesOutput = exports.PlanResourcesFilter_Expression_Operand = exports.PlanResourcesFilter_Expression = exports.PlanResourcesFilter = exports.PlanResourcesAst_LogicalOperation = exports.PlanResourcesAst_Node = exports.PlanResourcesAst = exports.PlanResourcesInput_Resource_AttrEntry = exports.PlanResourcesInput_Resource = exports.PlanResourcesInput = exports.Trace_Event_Status = exports.Trace_Component_Kind = exports.PlanResourcesFilter_Kind = exports.PlanResourcesAst_LogicalOperation_Operator = exports.protobufPackage = void 0;
const schema_1 = require("../../../cerbos/schema/v1/schema");
const checked_1 = require("../../../google/api/expr/v1alpha1/checked");
const _m0 = __importStar(require("protobufjs/minimal"));
const struct_1 = require("../../../google/protobuf/struct");
exports.protobufPackage = "cerbos.engine.v1";
var PlanResourcesAst_LogicalOperation_Operator;
(function (PlanResourcesAst_LogicalOperation_Operator) {
    PlanResourcesAst_LogicalOperation_Operator[PlanResourcesAst_LogicalOperation_Operator["OPERATOR_UNSPECIFIED"] = 0] = "OPERATOR_UNSPECIFIED";
    PlanResourcesAst_LogicalOperation_Operator[PlanResourcesAst_LogicalOperation_Operator["OPERATOR_AND"] = 1] = "OPERATOR_AND";
    PlanResourcesAst_LogicalOperation_Operator[PlanResourcesAst_LogicalOperation_Operator["OPERATOR_OR"] = 2] = "OPERATOR_OR";
    PlanResourcesAst_LogicalOperation_Operator[PlanResourcesAst_LogicalOperation_Operator["OPERATOR_NOT"] = 3] = "OPERATOR_NOT";
})(PlanResourcesAst_LogicalOperation_Operator = exports.PlanResourcesAst_LogicalOperation_Operator || (exports.PlanResourcesAst_LogicalOperation_Operator = {}));
var PlanResourcesFilter_Kind;
(function (PlanResourcesFilter_Kind) {
    PlanResourcesFilter_Kind[PlanResourcesFilter_Kind["KIND_UNSPECIFIED"] = 0] = "KIND_UNSPECIFIED";
    PlanResourcesFilter_Kind[PlanResourcesFilter_Kind["KIND_ALWAYS_ALLOWED"] = 1] = "KIND_ALWAYS_ALLOWED";
    PlanResourcesFilter_Kind[PlanResourcesFilter_Kind["KIND_ALWAYS_DENIED"] = 2] = "KIND_ALWAYS_DENIED";
    PlanResourcesFilter_Kind[PlanResourcesFilter_Kind["KIND_CONDITIONAL"] = 3] = "KIND_CONDITIONAL";
})(PlanResourcesFilter_Kind = exports.PlanResourcesFilter_Kind || (exports.PlanResourcesFilter_Kind = {}));
var Trace_Component_Kind;
(function (Trace_Component_Kind) {
    Trace_Component_Kind[Trace_Component_Kind["KIND_UNSPECIFIED"] = 0] = "KIND_UNSPECIFIED";
    Trace_Component_Kind[Trace_Component_Kind["KIND_ACTION"] = 1] = "KIND_ACTION";
    Trace_Component_Kind[Trace_Component_Kind["KIND_CONDITION_ALL"] = 2] = "KIND_CONDITION_ALL";
    Trace_Component_Kind[Trace_Component_Kind["KIND_CONDITION_ANY"] = 3] = "KIND_CONDITION_ANY";
    Trace_Component_Kind[Trace_Component_Kind["KIND_CONDITION_NONE"] = 4] = "KIND_CONDITION_NONE";
    Trace_Component_Kind[Trace_Component_Kind["KIND_CONDITION"] = 5] = "KIND_CONDITION";
    Trace_Component_Kind[Trace_Component_Kind["KIND_DERIVED_ROLE"] = 6] = "KIND_DERIVED_ROLE";
    Trace_Component_Kind[Trace_Component_Kind["KIND_EXPR"] = 7] = "KIND_EXPR";
    Trace_Component_Kind[Trace_Component_Kind["KIND_POLICY"] = 8] = "KIND_POLICY";
    Trace_Component_Kind[Trace_Component_Kind["KIND_RESOURCE"] = 9] = "KIND_RESOURCE";
    Trace_Component_Kind[Trace_Component_Kind["KIND_RULE"] = 10] = "KIND_RULE";
    Trace_Component_Kind[Trace_Component_Kind["KIND_SCOPE"] = 11] = "KIND_SCOPE";
    Trace_Component_Kind[Trace_Component_Kind["KIND_VARIABLE"] = 12] = "KIND_VARIABLE";
    Trace_Component_Kind[Trace_Component_Kind["KIND_VARIABLES"] = 13] = "KIND_VARIABLES";
})(Trace_Component_Kind = exports.Trace_Component_Kind || (exports.Trace_Component_Kind = {}));
var Trace_Event_Status;
(function (Trace_Event_Status) {
    Trace_Event_Status[Trace_Event_Status["STATUS_UNSPECIFIED"] = 0] = "STATUS_UNSPECIFIED";
    Trace_Event_Status[Trace_Event_Status["STATUS_ACTIVATED"] = 1] = "STATUS_ACTIVATED";
    Trace_Event_Status[Trace_Event_Status["STATUS_SKIPPED"] = 2] = "STATUS_SKIPPED";
})(Trace_Event_Status = exports.Trace_Event_Status || (exports.Trace_Event_Status = {}));
function createBasePlanResourcesInput() {
    return {
        requestId: "",
        action: "",
        principal: undefined,
        resource: undefined,
        auxData: undefined,
        includeMeta: false,
    };
}
exports.PlanResourcesInput = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.requestId !== "") {
            writer.uint32(10).string(message.requestId);
        }
        if (message.action !== "") {
            writer.uint32(18).string(message.action);
        }
        if (message.principal !== undefined) {
            exports.Principal.encode(message.principal, writer.uint32(26).fork()).ldelim();
        }
        if (message.resource !== undefined) {
            exports.PlanResourcesInput_Resource.encode(message.resource, writer.uint32(34).fork()).ldelim();
        }
        if (message.auxData !== undefined) {
            exports.AuxData.encode(message.auxData, writer.uint32(42).fork()).ldelim();
        }
        if (message.includeMeta === true) {
            writer.uint32(48).bool(message.includeMeta);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePlanResourcesInput();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.requestId = reader.string();
                    break;
                case 2:
                    message.action = reader.string();
                    break;
                case 3:
                    message.principal = exports.Principal.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.resource = exports.PlanResourcesInput_Resource.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.auxData = exports.AuxData.decode(reader, reader.uint32());
                    break;
                case 6:
                    message.includeMeta = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
};
function createBasePlanResourcesInput_Resource() {
    return { kind: "", attr: {}, policyVersion: "", scope: "" };
}
exports.PlanResourcesInput_Resource = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.kind !== "") {
            writer.uint32(10).string(message.kind);
        }
        Object.entries(message.attr).forEach(([key, value]) => {
            if (value !== undefined) {
                exports.PlanResourcesInput_Resource_AttrEntry.encode({ key: key, value }, writer.uint32(18).fork()).ldelim();
            }
        });
        if (message.policyVersion !== "") {
            writer.uint32(26).string(message.policyVersion);
        }
        if (message.scope !== "") {
            writer.uint32(34).string(message.scope);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePlanResourcesInput_Resource();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.kind = reader.string();
                    break;
                case 2:
                    const entry2 = exports.PlanResourcesInput_Resource_AttrEntry.decode(reader, reader.uint32());
                    if (entry2.value !== undefined) {
                        message.attr[entry2.key] = entry2.value;
                    }
                    break;
                case 3:
                    message.policyVersion = reader.string();
                    break;
                case 4:
                    message.scope = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
};
function createBasePlanResourcesInput_Resource_AttrEntry() {
    return { key: "", value: undefined };
}
exports.PlanResourcesInput_Resource_AttrEntry = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            struct_1.Value.encode(struct_1.Value.wrap(message.value), writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePlanResourcesInput_Resource_AttrEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = struct_1.Value.unwrap(struct_1.Value.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
};
function createBasePlanResourcesAst() {
    return { filterAst: undefined };
}
exports.PlanResourcesAst = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.filterAst !== undefined) {
            exports.PlanResourcesAst_Node.encode(message.filterAst, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePlanResourcesAst();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.filterAst = exports.PlanResourcesAst_Node.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
};
function createBasePlanResourcesAst_Node() {
    return { node: undefined };
}
exports.PlanResourcesAst_Node = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.node?.$case === "logicalOperation") {
            exports.PlanResourcesAst_LogicalOperation.encode(message.node.logicalOperation, writer.uint32(10).fork()).ldelim();
        }
        if (message.node?.$case === "expression") {
            checked_1.CheckedExpr.encode(message.node.expression, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePlanResourcesAst_Node();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.node = {
                        $case: "logicalOperation",
                        logicalOperation: exports.PlanResourcesAst_LogicalOperation.decode(reader, reader.uint32()),
                    };
                    break;
                case 2:
                    message.node = {
                        $case: "expression",
                        expression: checked_1.CheckedExpr.decode(reader, reader.uint32()),
                    };
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
};
function createBasePlanResourcesAst_LogicalOperation() {
    return { operator: 0, nodes: [] };
}
exports.PlanResourcesAst_LogicalOperation = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.operator !== 0) {
            writer.uint32(8).int32(message.operator);
        }
        for (const v of message.nodes) {
            exports.PlanResourcesAst_Node.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePlanResourcesAst_LogicalOperation();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.operator = reader.int32();
                    break;
                case 2:
                    message.nodes.push(exports.PlanResourcesAst_Node.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
};
function createBasePlanResourcesFilter() {
    return { kind: 0, condition: undefined };
}
exports.PlanResourcesFilter = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.kind !== 0) {
            writer.uint32(8).int32(message.kind);
        }
        if (message.condition !== undefined) {
            exports.PlanResourcesFilter_Expression_Operand.encode(message.condition, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePlanResourcesFilter();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.kind = reader.int32();
                    break;
                case 2:
                    message.condition = exports.PlanResourcesFilter_Expression_Operand.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
};
function createBasePlanResourcesFilter_Expression() {
    return { operator: "", operands: [] };
}
exports.PlanResourcesFilter_Expression = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.operator !== "") {
            writer.uint32(10).string(message.operator);
        }
        for (const v of message.operands) {
            exports.PlanResourcesFilter_Expression_Operand.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePlanResourcesFilter_Expression();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.operator = reader.string();
                    break;
                case 2:
                    message.operands.push(exports.PlanResourcesFilter_Expression_Operand.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
};
function createBasePlanResourcesFilter_Expression_Operand() {
    return { node: undefined };
}
exports.PlanResourcesFilter_Expression_Operand = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.node?.$case === "value") {
            struct_1.Value.encode(struct_1.Value.wrap(message.node.value), writer.uint32(10).fork()).ldelim();
        }
        if (message.node?.$case === "expression") {
            exports.PlanResourcesFilter_Expression.encode(message.node.expression, writer.uint32(18).fork()).ldelim();
        }
        if (message.node?.$case === "variable") {
            writer.uint32(26).string(message.node.variable);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePlanResourcesFilter_Expression_Operand();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.node = {
                        $case: "value",
                        value: struct_1.Value.unwrap(struct_1.Value.decode(reader, reader.uint32())),
                    };
                    break;
                case 2:
                    message.node = {
                        $case: "expression",
                        expression: exports.PlanResourcesFilter_Expression.decode(reader, reader.uint32()),
                    };
                    break;
                case 3:
                    message.node = { $case: "variable", variable: reader.string() };
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
};
function createBasePlanResourcesOutput() {
    return {
        requestId: "",
        action: "",
        kind: "",
        policyVersion: "",
        scope: "",
        filter: undefined,
        filterDebug: "",
        validationErrors: [],
    };
}
exports.PlanResourcesOutput = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.requestId !== "") {
            writer.uint32(10).string(message.requestId);
        }
        if (message.action !== "") {
            writer.uint32(18).string(message.action);
        }
        if (message.kind !== "") {
            writer.uint32(26).string(message.kind);
        }
        if (message.policyVersion !== "") {
            writer.uint32(34).string(message.policyVersion);
        }
        if (message.scope !== "") {
            writer.uint32(42).string(message.scope);
        }
        if (message.filter !== undefined) {
            exports.PlanResourcesFilter.encode(message.filter, writer.uint32(50).fork()).ldelim();
        }
        if (message.filterDebug !== "") {
            writer.uint32(58).string(message.filterDebug);
        }
        for (const v of message.validationErrors) {
            schema_1.ValidationError.encode(v, writer.uint32(66).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePlanResourcesOutput();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.requestId = reader.string();
                    break;
                case 2:
                    message.action = reader.string();
                    break;
                case 3:
                    message.kind = reader.string();
                    break;
                case 4:
                    message.policyVersion = reader.string();
                    break;
                case 5:
                    message.scope = reader.string();
                    break;
                case 6:
                    message.filter = exports.PlanResourcesFilter.decode(reader, reader.uint32());
                    break;
                case 7:
                    message.filterDebug = reader.string();
                    break;
                case 8:
                    message.validationErrors.push(schema_1.ValidationError.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
};
function createBaseCheckInput() {
    return {
        requestId: "",
        resource: undefined,
        principal: undefined,
        actions: [],
        auxData: undefined,
    };
}
exports.CheckInput = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.requestId !== "") {
            writer.uint32(10).string(message.requestId);
        }
        if (message.resource !== undefined) {
            exports.Resource.encode(message.resource, writer.uint32(18).fork()).ldelim();
        }
        if (message.principal !== undefined) {
            exports.Principal.encode(message.principal, writer.uint32(26).fork()).ldelim();
        }
        for (const v of message.actions) {
            writer.uint32(34).string(v);
        }
        if (message.auxData !== undefined) {
            exports.AuxData.encode(message.auxData, writer.uint32(42).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCheckInput();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.requestId = reader.string();
                    break;
                case 2:
                    message.resource = exports.Resource.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.principal = exports.Principal.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.actions.push(reader.string());
                    break;
                case 5:
                    message.auxData = exports.AuxData.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
};
function createBaseCheckOutput() {
    return {
        requestId: "",
        resourceId: "",
        actions: {},
        effectiveDerivedRoles: [],
        validationErrors: [],
    };
}
exports.CheckOutput = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.requestId !== "") {
            writer.uint32(10).string(message.requestId);
        }
        if (message.resourceId !== "") {
            writer.uint32(18).string(message.resourceId);
        }
        Object.entries(message.actions).forEach(([key, value]) => {
            exports.CheckOutput_ActionsEntry.encode({ key: key, value }, writer.uint32(26).fork()).ldelim();
        });
        for (const v of message.effectiveDerivedRoles) {
            writer.uint32(34).string(v);
        }
        for (const v of message.validationErrors) {
            schema_1.ValidationError.encode(v, writer.uint32(42).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCheckOutput();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.requestId = reader.string();
                    break;
                case 2:
                    message.resourceId = reader.string();
                    break;
                case 3:
                    const entry3 = exports.CheckOutput_ActionsEntry.decode(reader, reader.uint32());
                    if (entry3.value !== undefined) {
                        message.actions[entry3.key] = entry3.value;
                    }
                    break;
                case 4:
                    message.effectiveDerivedRoles.push(reader.string());
                    break;
                case 5:
                    message.validationErrors.push(schema_1.ValidationError.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
};
function createBaseCheckOutput_ActionEffect() {
    return { effect: 0, policy: "", scope: "" };
}
exports.CheckOutput_ActionEffect = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.effect !== 0) {
            writer.uint32(8).int32(message.effect);
        }
        if (message.policy !== "") {
            writer.uint32(18).string(message.policy);
        }
        if (message.scope !== "") {
            writer.uint32(26).string(message.scope);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCheckOutput_ActionEffect();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.effect = reader.int32();
                    break;
                case 2:
                    message.policy = reader.string();
                    break;
                case 3:
                    message.scope = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
};
function createBaseCheckOutput_ActionsEntry() {
    return { key: "", value: undefined };
}
exports.CheckOutput_ActionsEntry = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            exports.CheckOutput_ActionEffect.encode(message.value, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCheckOutput_ActionsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = exports.CheckOutput_ActionEffect.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
};
function createBaseResource() {
    return { kind: "", policyVersion: "", id: "", attr: {}, scope: "" };
}
exports.Resource = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.kind !== "") {
            writer.uint32(10).string(message.kind);
        }
        if (message.policyVersion !== "") {
            writer.uint32(18).string(message.policyVersion);
        }
        if (message.id !== "") {
            writer.uint32(26).string(message.id);
        }
        Object.entries(message.attr).forEach(([key, value]) => {
            if (value !== undefined) {
                exports.Resource_AttrEntry.encode({ key: key, value }, writer.uint32(34).fork()).ldelim();
            }
        });
        if (message.scope !== "") {
            writer.uint32(42).string(message.scope);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResource();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.kind = reader.string();
                    break;
                case 2:
                    message.policyVersion = reader.string();
                    break;
                case 3:
                    message.id = reader.string();
                    break;
                case 4:
                    const entry4 = exports.Resource_AttrEntry.decode(reader, reader.uint32());
                    if (entry4.value !== undefined) {
                        message.attr[entry4.key] = entry4.value;
                    }
                    break;
                case 5:
                    message.scope = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
};
function createBaseResource_AttrEntry() {
    return { key: "", value: undefined };
}
exports.Resource_AttrEntry = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            struct_1.Value.encode(struct_1.Value.wrap(message.value), writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResource_AttrEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = struct_1.Value.unwrap(struct_1.Value.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
};
function createBasePrincipal() {
    return { id: "", policyVersion: "", roles: [], attr: {}, scope: "" };
}
exports.Principal = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.policyVersion !== "") {
            writer.uint32(18).string(message.policyVersion);
        }
        for (const v of message.roles) {
            writer.uint32(26).string(v);
        }
        Object.entries(message.attr).forEach(([key, value]) => {
            if (value !== undefined) {
                exports.Principal_AttrEntry.encode({ key: key, value }, writer.uint32(34).fork()).ldelim();
            }
        });
        if (message.scope !== "") {
            writer.uint32(42).string(message.scope);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePrincipal();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.string();
                    break;
                case 2:
                    message.policyVersion = reader.string();
                    break;
                case 3:
                    message.roles.push(reader.string());
                    break;
                case 4:
                    const entry4 = exports.Principal_AttrEntry.decode(reader, reader.uint32());
                    if (entry4.value !== undefined) {
                        message.attr[entry4.key] = entry4.value;
                    }
                    break;
                case 5:
                    message.scope = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
};
function createBasePrincipal_AttrEntry() {
    return { key: "", value: undefined };
}
exports.Principal_AttrEntry = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            struct_1.Value.encode(struct_1.Value.wrap(message.value), writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePrincipal_AttrEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = struct_1.Value.unwrap(struct_1.Value.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
};
function createBaseAuxData() {
    return { jwt: {} };
}
exports.AuxData = {
    encode(message, writer = _m0.Writer.create()) {
        Object.entries(message.jwt).forEach(([key, value]) => {
            if (value !== undefined) {
                exports.AuxData_JwtEntry.encode({ key: key, value }, writer.uint32(10).fork()).ldelim();
            }
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAuxData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    const entry1 = exports.AuxData_JwtEntry.decode(reader, reader.uint32());
                    if (entry1.value !== undefined) {
                        message.jwt[entry1.key] = entry1.value;
                    }
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
};
function createBaseAuxData_JwtEntry() {
    return { key: "", value: undefined };
}
exports.AuxData_JwtEntry = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            struct_1.Value.encode(struct_1.Value.wrap(message.value), writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAuxData_JwtEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = struct_1.Value.unwrap(struct_1.Value.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
};
function createBaseTrace() {
    return { components: [], event: undefined };
}
exports.Trace = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.components) {
            exports.Trace_Component.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.event !== undefined) {
            exports.Trace_Event.encode(message.event, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTrace();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.components.push(exports.Trace_Component.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.event = exports.Trace_Event.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
};
function createBaseTrace_Component() {
    return { kind: 0, details: undefined };
}
exports.Trace_Component = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.kind !== 0) {
            writer.uint32(8).int32(message.kind);
        }
        if (message.details?.$case === "action") {
            writer.uint32(18).string(message.details.action);
        }
        if (message.details?.$case === "derivedRole") {
            writer.uint32(26).string(message.details.derivedRole);
        }
        if (message.details?.$case === "expr") {
            writer.uint32(34).string(message.details.expr);
        }
        if (message.details?.$case === "index") {
            writer.uint32(40).uint32(message.details.index);
        }
        if (message.details?.$case === "policy") {
            writer.uint32(50).string(message.details.policy);
        }
        if (message.details?.$case === "resource") {
            writer.uint32(58).string(message.details.resource);
        }
        if (message.details?.$case === "rule") {
            writer.uint32(66).string(message.details.rule);
        }
        if (message.details?.$case === "scope") {
            writer.uint32(74).string(message.details.scope);
        }
        if (message.details?.$case === "variable") {
            exports.Trace_Component_Variable.encode(message.details.variable, writer.uint32(82).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTrace_Component();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.kind = reader.int32();
                    break;
                case 2:
                    message.details = { $case: "action", action: reader.string() };
                    break;
                case 3:
                    message.details = {
                        $case: "derivedRole",
                        derivedRole: reader.string(),
                    };
                    break;
                case 4:
                    message.details = { $case: "expr", expr: reader.string() };
                    break;
                case 5:
                    message.details = { $case: "index", index: reader.uint32() };
                    break;
                case 6:
                    message.details = { $case: "policy", policy: reader.string() };
                    break;
                case 7:
                    message.details = { $case: "resource", resource: reader.string() };
                    break;
                case 8:
                    message.details = { $case: "rule", rule: reader.string() };
                    break;
                case 9:
                    message.details = { $case: "scope", scope: reader.string() };
                    break;
                case 10:
                    message.details = {
                        $case: "variable",
                        variable: exports.Trace_Component_Variable.decode(reader, reader.uint32()),
                    };
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
};
function createBaseTrace_Component_Variable() {
    return { name: "", expr: "" };
}
exports.Trace_Component_Variable = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.expr !== "") {
            writer.uint32(18).string(message.expr);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTrace_Component_Variable();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.name = reader.string();
                    break;
                case 2:
                    message.expr = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
};
function createBaseTrace_Event() {
    return { status: 0, effect: 0, error: "", message: "", result: undefined };
}
exports.Trace_Event = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.status !== 0) {
            writer.uint32(8).int32(message.status);
        }
        if (message.effect !== 0) {
            writer.uint32(16).int32(message.effect);
        }
        if (message.error !== "") {
            writer.uint32(26).string(message.error);
        }
        if (message.message !== "") {
            writer.uint32(34).string(message.message);
        }
        if (message.result !== undefined) {
            struct_1.Value.encode(struct_1.Value.wrap(message.result), writer.uint32(42).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTrace_Event();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.status = reader.int32();
                    break;
                case 2:
                    message.effect = reader.int32();
                    break;
                case 3:
                    message.error = reader.string();
                    break;
                case 4:
                    message.message = reader.string();
                    break;
                case 5:
                    message.result = struct_1.Value.unwrap(struct_1.Value.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
};
//# sourceMappingURL=engine.js.map