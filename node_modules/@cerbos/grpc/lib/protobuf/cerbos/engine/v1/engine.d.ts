import { Effect } from "../../../cerbos/effect/v1/effect";
import { ValidationError } from "../../../cerbos/schema/v1/schema";
import { CheckedExpr } from "../../../google/api/expr/v1alpha1/checked";
import * as _m0 from "protobufjs/minimal";
export declare const protobufPackage = "cerbos.engine.v1";
export interface PlanResourcesInput {
    requestId: string;
    action: string;
    principal: Principal | undefined;
    resource: PlanResourcesInput_Resource | undefined;
    auxData: AuxData | undefined;
    includeMeta: boolean;
}
export interface PlanResourcesInput_Resource {
    kind: string;
    attr: {
        [key: string]: any | undefined;
    };
    policyVersion: string;
    scope: string;
}
export interface PlanResourcesInput_Resource_AttrEntry {
    key: string;
    value: any | undefined;
}
export interface PlanResourcesAst {
    filterAst: PlanResourcesAst_Node | undefined;
}
export interface PlanResourcesAst_Node {
    node?: {
        $case: "logicalOperation";
        logicalOperation: PlanResourcesAst_LogicalOperation;
    } | {
        $case: "expression";
        expression: CheckedExpr;
    };
}
export interface PlanResourcesAst_LogicalOperation {
    operator: PlanResourcesAst_LogicalOperation_Operator;
    nodes: PlanResourcesAst_Node[];
}
export declare enum PlanResourcesAst_LogicalOperation_Operator {
    OPERATOR_UNSPECIFIED = 0,
    OPERATOR_AND = 1,
    OPERATOR_OR = 2,
    OPERATOR_NOT = 3
}
export interface PlanResourcesFilter {
    kind: PlanResourcesFilter_Kind;
    condition: PlanResourcesFilter_Expression_Operand | undefined;
}
export declare enum PlanResourcesFilter_Kind {
    KIND_UNSPECIFIED = 0,
    KIND_ALWAYS_ALLOWED = 1,
    KIND_ALWAYS_DENIED = 2,
    KIND_CONDITIONAL = 3
}
export interface PlanResourcesFilter_Expression {
    operator: string;
    operands: PlanResourcesFilter_Expression_Operand[];
}
export interface PlanResourcesFilter_Expression_Operand {
    node?: {
        $case: "value";
        value: any | undefined;
    } | {
        $case: "expression";
        expression: PlanResourcesFilter_Expression;
    } | {
        $case: "variable";
        variable: string;
    };
}
export interface PlanResourcesOutput {
    requestId: string;
    action: string;
    kind: string;
    policyVersion: string;
    scope: string;
    filter: PlanResourcesFilter | undefined;
    filterDebug: string;
    validationErrors: ValidationError[];
}
export interface CheckInput {
    requestId: string;
    resource: Resource | undefined;
    principal: Principal | undefined;
    actions: string[];
    auxData: AuxData | undefined;
}
export interface CheckOutput {
    requestId: string;
    resourceId: string;
    actions: {
        [key: string]: CheckOutput_ActionEffect;
    };
    effectiveDerivedRoles: string[];
    validationErrors: ValidationError[];
}
export interface CheckOutput_ActionEffect {
    effect: Effect;
    policy: string;
    scope: string;
}
export interface CheckOutput_ActionsEntry {
    key: string;
    value: CheckOutput_ActionEffect | undefined;
}
export interface Resource {
    kind: string;
    policyVersion: string;
    id: string;
    attr: {
        [key: string]: any | undefined;
    };
    scope: string;
}
export interface Resource_AttrEntry {
    key: string;
    value: any | undefined;
}
export interface Principal {
    id: string;
    policyVersion: string;
    roles: string[];
    attr: {
        [key: string]: any | undefined;
    };
    scope: string;
}
export interface Principal_AttrEntry {
    key: string;
    value: any | undefined;
}
export interface AuxData {
    jwt: {
        [key: string]: any | undefined;
    };
}
export interface AuxData_JwtEntry {
    key: string;
    value: any | undefined;
}
export interface Trace {
    components: Trace_Component[];
    event: Trace_Event | undefined;
}
export interface Trace_Component {
    kind: Trace_Component_Kind;
    details?: {
        $case: "action";
        action: string;
    } | {
        $case: "derivedRole";
        derivedRole: string;
    } | {
        $case: "expr";
        expr: string;
    } | {
        $case: "index";
        index: number;
    } | {
        $case: "policy";
        policy: string;
    } | {
        $case: "resource";
        resource: string;
    } | {
        $case: "rule";
        rule: string;
    } | {
        $case: "scope";
        scope: string;
    } | {
        $case: "variable";
        variable: Trace_Component_Variable;
    };
}
export declare enum Trace_Component_Kind {
    KIND_UNSPECIFIED = 0,
    KIND_ACTION = 1,
    KIND_CONDITION_ALL = 2,
    KIND_CONDITION_ANY = 3,
    KIND_CONDITION_NONE = 4,
    KIND_CONDITION = 5,
    KIND_DERIVED_ROLE = 6,
    KIND_EXPR = 7,
    KIND_POLICY = 8,
    KIND_RESOURCE = 9,
    KIND_RULE = 10,
    KIND_SCOPE = 11,
    KIND_VARIABLE = 12,
    KIND_VARIABLES = 13
}
export interface Trace_Component_Variable {
    name: string;
    expr: string;
}
export interface Trace_Event {
    status: Trace_Event_Status;
    effect: Effect;
    error: string;
    message: string;
    result: any | undefined;
}
export declare enum Trace_Event_Status {
    STATUS_UNSPECIFIED = 0,
    STATUS_ACTIVATED = 1,
    STATUS_SKIPPED = 2
}
export declare const PlanResourcesInput: {
    encode(message: PlanResourcesInput, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PlanResourcesInput;
};
export declare const PlanResourcesInput_Resource: {
    encode(message: PlanResourcesInput_Resource, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PlanResourcesInput_Resource;
};
export declare const PlanResourcesInput_Resource_AttrEntry: {
    encode(message: PlanResourcesInput_Resource_AttrEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PlanResourcesInput_Resource_AttrEntry;
};
export declare const PlanResourcesAst: {
    encode(message: PlanResourcesAst, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PlanResourcesAst;
};
export declare const PlanResourcesAst_Node: {
    encode(message: PlanResourcesAst_Node, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PlanResourcesAst_Node;
};
export declare const PlanResourcesAst_LogicalOperation: {
    encode(message: PlanResourcesAst_LogicalOperation, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PlanResourcesAst_LogicalOperation;
};
export declare const PlanResourcesFilter: {
    encode(message: PlanResourcesFilter, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PlanResourcesFilter;
};
export declare const PlanResourcesFilter_Expression: {
    encode(message: PlanResourcesFilter_Expression, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PlanResourcesFilter_Expression;
};
export declare const PlanResourcesFilter_Expression_Operand: {
    encode(message: PlanResourcesFilter_Expression_Operand, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PlanResourcesFilter_Expression_Operand;
};
export declare const PlanResourcesOutput: {
    encode(message: PlanResourcesOutput, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PlanResourcesOutput;
};
export declare const CheckInput: {
    encode(message: CheckInput, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CheckInput;
};
export declare const CheckOutput: {
    encode(message: CheckOutput, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CheckOutput;
};
export declare const CheckOutput_ActionEffect: {
    encode(message: CheckOutput_ActionEffect, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CheckOutput_ActionEffect;
};
export declare const CheckOutput_ActionsEntry: {
    encode(message: CheckOutput_ActionsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CheckOutput_ActionsEntry;
};
export declare const Resource: {
    encode(message: Resource, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Resource;
};
export declare const Resource_AttrEntry: {
    encode(message: Resource_AttrEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Resource_AttrEntry;
};
export declare const Principal: {
    encode(message: Principal, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Principal;
};
export declare const Principal_AttrEntry: {
    encode(message: Principal_AttrEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Principal_AttrEntry;
};
export declare const AuxData: {
    encode(message: AuxData, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AuxData;
};
export declare const AuxData_JwtEntry: {
    encode(message: AuxData_JwtEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AuxData_JwtEntry;
};
export declare const Trace: {
    encode(message: Trace, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Trace;
};
export declare const Trace_Component: {
    encode(message: Trace_Component, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Trace_Component;
};
export declare const Trace_Component_Variable: {
    encode(message: Trace_Component_Variable, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Trace_Component_Variable;
};
export declare const Trace_Event: {
    encode(message: Trace_Event, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Trace_Event;
};
//# sourceMappingURL=engine.d.ts.map