"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Peer = exports.MetaValues = exports.DecisionLogEntry_PlanResources = exports.DecisionLogEntry_CheckResources = exports.DecisionLogEntry = exports.AccessLogEntry_MetadataEntry = exports.AccessLogEntry = exports.protobufPackage = void 0;
/* eslint-disable */
const timestamp_1 = require("../../../google/protobuf/timestamp");
const engine_1 = require("../../../cerbos/engine/v1/engine");
const _m0 = __importStar(require("protobufjs/minimal"));
exports.protobufPackage = "cerbos.audit.v1";
function createBaseAccessLogEntry() {
    return {
        callId: "",
        timestamp: undefined,
        peer: undefined,
        metadata: {},
        method: "",
        statusCode: 0,
    };
}
exports.AccessLogEntry = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.callId !== "") {
            writer.uint32(10).string(message.callId);
        }
        if (message.timestamp !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.timestamp), writer.uint32(18).fork()).ldelim();
        }
        if (message.peer !== undefined) {
            exports.Peer.encode(message.peer, writer.uint32(26).fork()).ldelim();
        }
        Object.entries(message.metadata).forEach(([key, value]) => {
            exports.AccessLogEntry_MetadataEntry.encode({ key: key, value }, writer.uint32(34).fork()).ldelim();
        });
        if (message.method !== "") {
            writer.uint32(42).string(message.method);
        }
        if (message.statusCode !== 0) {
            writer.uint32(48).uint32(message.statusCode);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAccessLogEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.callId = reader.string();
                    break;
                case 2:
                    message.timestamp = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.peer = exports.Peer.decode(reader, reader.uint32());
                    break;
                case 4:
                    const entry4 = exports.AccessLogEntry_MetadataEntry.decode(reader, reader.uint32());
                    if (entry4.value !== undefined) {
                        message.metadata[entry4.key] = entry4.value;
                    }
                    break;
                case 5:
                    message.method = reader.string();
                    break;
                case 6:
                    message.statusCode = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
};
function createBaseAccessLogEntry_MetadataEntry() {
    return { key: "", value: undefined };
}
exports.AccessLogEntry_MetadataEntry = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            exports.MetaValues.encode(message.value, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAccessLogEntry_MetadataEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = exports.MetaValues.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
};
function createBaseDecisionLogEntry() {
    return {
        callId: "",
        timestamp: undefined,
        peer: undefined,
        inputs: [],
        outputs: [],
        error: "",
        method: undefined,
    };
}
exports.DecisionLogEntry = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.callId !== "") {
            writer.uint32(10).string(message.callId);
        }
        if (message.timestamp !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.timestamp), writer.uint32(18).fork()).ldelim();
        }
        if (message.peer !== undefined) {
            exports.Peer.encode(message.peer, writer.uint32(26).fork()).ldelim();
        }
        for (const v of message.inputs) {
            engine_1.CheckInput.encode(v, writer.uint32(34).fork()).ldelim();
        }
        for (const v of message.outputs) {
            engine_1.CheckOutput.encode(v, writer.uint32(42).fork()).ldelim();
        }
        if (message.error !== "") {
            writer.uint32(50).string(message.error);
        }
        if (message.method?.$case === "checkResources") {
            exports.DecisionLogEntry_CheckResources.encode(message.method.checkResources, writer.uint32(58).fork()).ldelim();
        }
        if (message.method?.$case === "planResources") {
            exports.DecisionLogEntry_PlanResources.encode(message.method.planResources, writer.uint32(66).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDecisionLogEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.callId = reader.string();
                    break;
                case 2:
                    message.timestamp = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.peer = exports.Peer.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.inputs.push(engine_1.CheckInput.decode(reader, reader.uint32()));
                    break;
                case 5:
                    message.outputs.push(engine_1.CheckOutput.decode(reader, reader.uint32()));
                    break;
                case 6:
                    message.error = reader.string();
                    break;
                case 7:
                    message.method = {
                        $case: "checkResources",
                        checkResources: exports.DecisionLogEntry_CheckResources.decode(reader, reader.uint32()),
                    };
                    break;
                case 8:
                    message.method = {
                        $case: "planResources",
                        planResources: exports.DecisionLogEntry_PlanResources.decode(reader, reader.uint32()),
                    };
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
};
function createBaseDecisionLogEntry_CheckResources() {
    return { inputs: [], outputs: [], error: "" };
}
exports.DecisionLogEntry_CheckResources = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.inputs) {
            engine_1.CheckInput.encode(v, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.outputs) {
            engine_1.CheckOutput.encode(v, writer.uint32(18).fork()).ldelim();
        }
        if (message.error !== "") {
            writer.uint32(26).string(message.error);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDecisionLogEntry_CheckResources();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.inputs.push(engine_1.CheckInput.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.outputs.push(engine_1.CheckOutput.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.error = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
};
function createBaseDecisionLogEntry_PlanResources() {
    return { input: undefined, output: undefined, error: "" };
}
exports.DecisionLogEntry_PlanResources = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.input !== undefined) {
            engine_1.PlanResourcesInput.encode(message.input, writer.uint32(10).fork()).ldelim();
        }
        if (message.output !== undefined) {
            engine_1.PlanResourcesOutput.encode(message.output, writer.uint32(18).fork()).ldelim();
        }
        if (message.error !== "") {
            writer.uint32(26).string(message.error);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDecisionLogEntry_PlanResources();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.input = engine_1.PlanResourcesInput.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.output = engine_1.PlanResourcesOutput.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.error = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
};
function createBaseMetaValues() {
    return { values: [] };
}
exports.MetaValues = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.values) {
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMetaValues();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.values.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
};
function createBasePeer() {
    return { address: "", authInfo: "", userAgent: "", forwardedFor: "" };
}
exports.Peer = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        if (message.authInfo !== "") {
            writer.uint32(18).string(message.authInfo);
        }
        if (message.userAgent !== "") {
            writer.uint32(26).string(message.userAgent);
        }
        if (message.forwardedFor !== "") {
            writer.uint32(34).string(message.forwardedFor);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePeer();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.address = reader.string();
                    break;
                case 2:
                    message.authInfo = reader.string();
                    break;
                case 3:
                    message.userAgent = reader.string();
                    break;
                case 4:
                    message.forwardedFor = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
};
function toTimestamp(date) {
    const seconds = date.getTime() / 1000;
    const nanos = (date.getTime() % 1000) * 1000000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = t.seconds * 1000;
    millis += t.nanos / 1000000;
    return new Date(millis);
}
//# sourceMappingURL=audit.js.map