import { Effect } from "../../../cerbos/effect/v1/effect";
import { Principal, Resource, AuxData, CheckInput, Trace } from "../../../cerbos/engine/v1/engine";
import * as _m0 from "protobufjs/minimal";
export declare const protobufPackage = "cerbos.policy.v1";
export interface Policy {
    apiVersion: string;
    disabled: boolean;
    description: string;
    metadata: Metadata | undefined;
    policyType?: {
        $case: "resourcePolicy";
        resourcePolicy: ResourcePolicy;
    } | {
        $case: "principalPolicy";
        principalPolicy: PrincipalPolicy;
    } | {
        $case: "derivedRoles";
        derivedRoles: DerivedRoles;
    };
    variables: {
        [key: string]: string;
    };
}
export interface Policy_VariablesEntry {
    key: string;
    value: string;
}
export interface Metadata {
    sourceFile: string;
    annotations: {
        [key: string]: string;
    };
    hash: number | undefined;
    storeIdentifer: string;
}
export interface Metadata_AnnotationsEntry {
    key: string;
    value: string;
}
export interface ResourcePolicy {
    resource: string;
    version: string;
    importDerivedRoles: string[];
    rules: ResourceRule[];
    scope: string;
    schemas: Schemas | undefined;
}
export interface ResourceRule {
    actions: string[];
    derivedRoles: string[];
    roles: string[];
    condition: Condition | undefined;
    effect: Effect;
    name: string;
}
export interface PrincipalPolicy {
    principal: string;
    version: string;
    rules: PrincipalRule[];
    scope: string;
}
export interface PrincipalRule {
    resource: string;
    actions: PrincipalRule_Action[];
}
export interface PrincipalRule_Action {
    action: string;
    condition: Condition | undefined;
    effect: Effect;
    name: string;
}
export interface DerivedRoles {
    name: string;
    definitions: RoleDef[];
}
export interface RoleDef {
    name: string;
    parentRoles: string[];
    condition: Condition | undefined;
}
export interface Condition {
    condition?: {
        $case: "match";
        match: Match;
    } | {
        $case: "script";
        script: string;
    };
}
export interface Match {
    op?: {
        $case: "all";
        all: Match_ExprList;
    } | {
        $case: "any";
        any: Match_ExprList;
    } | {
        $case: "none";
        none: Match_ExprList;
    } | {
        $case: "expr";
        expr: string;
    };
}
export interface Match_ExprList {
    of: Match[];
}
export interface Schemas {
    principalSchema: Schemas_Schema | undefined;
    resourceSchema: Schemas_Schema | undefined;
}
export interface Schemas_IgnoreWhen {
    actions: string[];
}
export interface Schemas_Schema {
    ref: string;
    ignoreWhen: Schemas_IgnoreWhen | undefined;
}
export interface TestFixture {
}
export interface TestFixture_Principals {
    principals: {
        [key: string]: Principal;
    };
}
export interface TestFixture_Principals_PrincipalsEntry {
    key: string;
    value: Principal | undefined;
}
export interface TestFixture_Resources {
    resources: {
        [key: string]: Resource;
    };
}
export interface TestFixture_Resources_ResourcesEntry {
    key: string;
    value: Resource | undefined;
}
export interface TestFixture_AuxData {
    auxData: {
        [key: string]: AuxData;
    };
}
export interface TestFixture_AuxData_AuxDataEntry {
    key: string;
    value: AuxData | undefined;
}
export interface TestSuite {
    name: string;
    description: string;
    skip: boolean;
    skipReason: string;
    tests: TestTable[];
    principals: {
        [key: string]: Principal;
    };
    resources: {
        [key: string]: Resource;
    };
    auxData: {
        [key: string]: AuxData;
    };
}
export interface TestSuite_PrincipalsEntry {
    key: string;
    value: Principal | undefined;
}
export interface TestSuite_ResourcesEntry {
    key: string;
    value: Resource | undefined;
}
export interface TestSuite_AuxDataEntry {
    key: string;
    value: AuxData | undefined;
}
export interface TestTable {
    name: string;
    description: string;
    skip: boolean;
    skipReason: string;
    input: TestTable_Input | undefined;
    expected: TestTable_Expectation[];
}
export interface TestTable_Input {
    principals: string[];
    resources: string[];
    actions: string[];
    auxData: string;
}
export interface TestTable_Expectation {
    principal: string;
    resource: string;
    actions: {
        [key: string]: Effect;
    };
}
export interface TestTable_Expectation_ActionsEntry {
    key: string;
    value: Effect;
}
export interface Test {
    name: Test_TestName | undefined;
    description: string;
    skip: boolean;
    skipReason: string;
    input: CheckInput | undefined;
    expected: {
        [key: string]: Effect;
    };
}
export interface Test_TestName {
    testTableName: string;
    principalKey: string;
    resourceKey: string;
}
export interface Test_ExpectedEntry {
    key: string;
    value: Effect;
}
export interface TestResults {
    suites: TestResults_Suite[];
    summary: TestResults_Summary | undefined;
}
export declare enum TestResults_Result {
    RESULT_UNSPECIFIED = 0,
    RESULT_SKIPPED = 1,
    RESULT_PASSED = 2,
    RESULT_FAILED = 3,
    RESULT_ERRORED = 4
}
export interface TestResults_Tally {
    result: TestResults_Result;
    count: number;
}
export interface TestResults_Summary {
    overallResult: TestResults_Result;
    testsCount: number;
    resultCounts: TestResults_Tally[];
}
export interface TestResults_Suite {
    file: string;
    name: string;
    principals: TestResults_Principal[];
    summary: TestResults_Summary | undefined;
    error: string;
}
export interface TestResults_Principal {
    name: string;
    resources: TestResults_Resource[];
}
export interface TestResults_Resource {
    name: string;
    actions: TestResults_Action[];
}
export interface TestResults_Action {
    name: string;
    details: TestResults_Details | undefined;
}
export interface TestResults_Details {
    result: TestResults_Result;
    outcome?: {
        $case: "failure";
        failure: TestResults_Failure;
    } | {
        $case: "error";
        error: string;
    };
    engineTrace: Trace[];
}
export interface TestResults_Failure {
    expected: Effect;
    actual: Effect;
}
export declare const Policy: {
    encode(message: Policy, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Policy;
};
export declare const Policy_VariablesEntry: {
    encode(message: Policy_VariablesEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Policy_VariablesEntry;
};
export declare const Metadata: {
    encode(message: Metadata, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Metadata;
};
export declare const Metadata_AnnotationsEntry: {
    encode(message: Metadata_AnnotationsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Metadata_AnnotationsEntry;
};
export declare const ResourcePolicy: {
    encode(message: ResourcePolicy, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ResourcePolicy;
};
export declare const ResourceRule: {
    encode(message: ResourceRule, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ResourceRule;
};
export declare const PrincipalPolicy: {
    encode(message: PrincipalPolicy, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PrincipalPolicy;
};
export declare const PrincipalRule: {
    encode(message: PrincipalRule, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PrincipalRule;
};
export declare const PrincipalRule_Action: {
    encode(message: PrincipalRule_Action, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PrincipalRule_Action;
};
export declare const DerivedRoles: {
    encode(message: DerivedRoles, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DerivedRoles;
};
export declare const RoleDef: {
    encode(message: RoleDef, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RoleDef;
};
export declare const Condition: {
    encode(message: Condition, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Condition;
};
export declare const Match: {
    encode(message: Match, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Match;
};
export declare const Match_ExprList: {
    encode(message: Match_ExprList, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Match_ExprList;
};
export declare const Schemas: {
    encode(message: Schemas, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Schemas;
};
export declare const Schemas_IgnoreWhen: {
    encode(message: Schemas_IgnoreWhen, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Schemas_IgnoreWhen;
};
export declare const Schemas_Schema: {
    encode(message: Schemas_Schema, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Schemas_Schema;
};
export declare const TestFixture: {
    encode(_: TestFixture, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TestFixture;
};
export declare const TestFixture_Principals: {
    encode(message: TestFixture_Principals, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TestFixture_Principals;
};
export declare const TestFixture_Principals_PrincipalsEntry: {
    encode(message: TestFixture_Principals_PrincipalsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TestFixture_Principals_PrincipalsEntry;
};
export declare const TestFixture_Resources: {
    encode(message: TestFixture_Resources, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TestFixture_Resources;
};
export declare const TestFixture_Resources_ResourcesEntry: {
    encode(message: TestFixture_Resources_ResourcesEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TestFixture_Resources_ResourcesEntry;
};
export declare const TestFixture_AuxData: {
    encode(message: TestFixture_AuxData, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TestFixture_AuxData;
};
export declare const TestFixture_AuxData_AuxDataEntry: {
    encode(message: TestFixture_AuxData_AuxDataEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TestFixture_AuxData_AuxDataEntry;
};
export declare const TestSuite: {
    encode(message: TestSuite, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TestSuite;
};
export declare const TestSuite_PrincipalsEntry: {
    encode(message: TestSuite_PrincipalsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TestSuite_PrincipalsEntry;
};
export declare const TestSuite_ResourcesEntry: {
    encode(message: TestSuite_ResourcesEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TestSuite_ResourcesEntry;
};
export declare const TestSuite_AuxDataEntry: {
    encode(message: TestSuite_AuxDataEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TestSuite_AuxDataEntry;
};
export declare const TestTable: {
    encode(message: TestTable, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TestTable;
};
export declare const TestTable_Input: {
    encode(message: TestTable_Input, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TestTable_Input;
};
export declare const TestTable_Expectation: {
    encode(message: TestTable_Expectation, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TestTable_Expectation;
};
export declare const TestTable_Expectation_ActionsEntry: {
    encode(message: TestTable_Expectation_ActionsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TestTable_Expectation_ActionsEntry;
};
export declare const Test: {
    encode(message: Test, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Test;
};
export declare const Test_TestName: {
    encode(message: Test_TestName, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Test_TestName;
};
export declare const Test_ExpectedEntry: {
    encode(message: Test_ExpectedEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Test_ExpectedEntry;
};
export declare const TestResults: {
    encode(message: TestResults, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TestResults;
};
export declare const TestResults_Tally: {
    encode(message: TestResults_Tally, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TestResults_Tally;
};
export declare const TestResults_Summary: {
    encode(message: TestResults_Summary, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TestResults_Summary;
};
export declare const TestResults_Suite: {
    encode(message: TestResults_Suite, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TestResults_Suite;
};
export declare const TestResults_Principal: {
    encode(message: TestResults_Principal, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TestResults_Principal;
};
export declare const TestResults_Resource: {
    encode(message: TestResults_Resource, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TestResults_Resource;
};
export declare const TestResults_Action: {
    encode(message: TestResults_Action, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TestResults_Action;
};
export declare const TestResults_Details: {
    encode(message: TestResults_Details, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TestResults_Details;
};
export declare const TestResults_Failure: {
    encode(message: TestResults_Failure, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TestResults_Failure;
};
//# sourceMappingURL=policy.d.ts.map