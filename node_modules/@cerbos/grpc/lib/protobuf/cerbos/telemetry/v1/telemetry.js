"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Event_ApiActivity = exports.Event_CountStat = exports.Event = exports.ServerStop = exports.ServerLaunch_Stats_Schema = exports.ServerLaunch_Stats_Policy_AvgConditionCountEntry = exports.ServerLaunch_Stats_Policy_AvgRuleCountEntry = exports.ServerLaunch_Stats_Policy_CountEntry = exports.ServerLaunch_Stats_Policy = exports.ServerLaunch_Stats = exports.ServerLaunch_Features_Storage_Blob = exports.ServerLaunch_Features_Storage_Git = exports.ServerLaunch_Features_Storage_Disk = exports.ServerLaunch_Features_Storage = exports.ServerLaunch_Features_AdminApi = exports.ServerLaunch_Features_Schema = exports.ServerLaunch_Features_Audit = exports.ServerLaunch_Features = exports.ServerLaunch_Source = exports.ServerLaunch_Cerbos = exports.ServerLaunch = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const duration_1 = require("../../../google/protobuf/duration");
const _m0 = __importStar(require("protobufjs/minimal"));
exports.protobufPackage = "cerbos.telemetry.v1";
function createBaseServerLaunch() {
    return {
        version: "",
        source: undefined,
        features: undefined,
        stats: undefined,
    };
}
exports.ServerLaunch = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.version !== "") {
            writer.uint32(10).string(message.version);
        }
        if (message.source !== undefined) {
            exports.ServerLaunch_Source.encode(message.source, writer.uint32(18).fork()).ldelim();
        }
        if (message.features !== undefined) {
            exports.ServerLaunch_Features.encode(message.features, writer.uint32(26).fork()).ldelim();
        }
        if (message.stats !== undefined) {
            exports.ServerLaunch_Stats.encode(message.stats, writer.uint32(34).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseServerLaunch();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.version = reader.string();
                    break;
                case 2:
                    message.source = exports.ServerLaunch_Source.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.features = exports.ServerLaunch_Features.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.stats = exports.ServerLaunch_Stats.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
};
function createBaseServerLaunch_Cerbos() {
    return {
        version: "",
        commit: "",
        buildDate: "",
        moduleVersion: "",
        moduleChecksum: "",
    };
}
exports.ServerLaunch_Cerbos = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.version !== "") {
            writer.uint32(10).string(message.version);
        }
        if (message.commit !== "") {
            writer.uint32(18).string(message.commit);
        }
        if (message.buildDate !== "") {
            writer.uint32(26).string(message.buildDate);
        }
        if (message.moduleVersion !== "") {
            writer.uint32(34).string(message.moduleVersion);
        }
        if (message.moduleChecksum !== "") {
            writer.uint32(42).string(message.moduleChecksum);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseServerLaunch_Cerbos();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.version = reader.string();
                    break;
                case 2:
                    message.commit = reader.string();
                    break;
                case 3:
                    message.buildDate = reader.string();
                    break;
                case 4:
                    message.moduleVersion = reader.string();
                    break;
                case 5:
                    message.moduleChecksum = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
};
function createBaseServerLaunch_Source() {
    return { cerbos: undefined, os: "", arch: "", numCpus: 0 };
}
exports.ServerLaunch_Source = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.cerbos !== undefined) {
            exports.ServerLaunch_Cerbos.encode(message.cerbos, writer.uint32(10).fork()).ldelim();
        }
        if (message.os !== "") {
            writer.uint32(18).string(message.os);
        }
        if (message.arch !== "") {
            writer.uint32(26).string(message.arch);
        }
        if (message.numCpus !== 0) {
            writer.uint32(32).uint32(message.numCpus);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseServerLaunch_Source();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.cerbos = exports.ServerLaunch_Cerbos.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.os = reader.string();
                    break;
                case 3:
                    message.arch = reader.string();
                    break;
                case 4:
                    message.numCpus = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
};
function createBaseServerLaunch_Features() {
    return {
        audit: undefined,
        schema: undefined,
        adminApi: undefined,
        storage: undefined,
    };
}
exports.ServerLaunch_Features = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.audit !== undefined) {
            exports.ServerLaunch_Features_Audit.encode(message.audit, writer.uint32(10).fork()).ldelim();
        }
        if (message.schema !== undefined) {
            exports.ServerLaunch_Features_Schema.encode(message.schema, writer.uint32(18).fork()).ldelim();
        }
        if (message.adminApi !== undefined) {
            exports.ServerLaunch_Features_AdminApi.encode(message.adminApi, writer.uint32(26).fork()).ldelim();
        }
        if (message.storage !== undefined) {
            exports.ServerLaunch_Features_Storage.encode(message.storage, writer.uint32(34).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseServerLaunch_Features();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.audit = exports.ServerLaunch_Features_Audit.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.schema = exports.ServerLaunch_Features_Schema.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.adminApi = exports.ServerLaunch_Features_AdminApi.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.storage = exports.ServerLaunch_Features_Storage.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
};
function createBaseServerLaunch_Features_Audit() {
    return { enabled: false, backend: "" };
}
exports.ServerLaunch_Features_Audit = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.enabled === true) {
            writer.uint32(8).bool(message.enabled);
        }
        if (message.backend !== "") {
            writer.uint32(18).string(message.backend);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseServerLaunch_Features_Audit();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.enabled = reader.bool();
                    break;
                case 2:
                    message.backend = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
};
function createBaseServerLaunch_Features_Schema() {
    return { enforcement: "" };
}
exports.ServerLaunch_Features_Schema = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.enforcement !== "") {
            writer.uint32(10).string(message.enforcement);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseServerLaunch_Features_Schema();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.enforcement = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
};
function createBaseServerLaunch_Features_AdminApi() {
    return { enabled: false };
}
exports.ServerLaunch_Features_AdminApi = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.enabled === true) {
            writer.uint32(8).bool(message.enabled);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseServerLaunch_Features_AdminApi();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.enabled = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
};
function createBaseServerLaunch_Features_Storage() {
    return { driver: "", store: undefined };
}
exports.ServerLaunch_Features_Storage = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.driver !== "") {
            writer.uint32(10).string(message.driver);
        }
        if (message.store?.$case === "disk") {
            exports.ServerLaunch_Features_Storage_Disk.encode(message.store.disk, writer.uint32(18).fork()).ldelim();
        }
        if (message.store?.$case === "git") {
            exports.ServerLaunch_Features_Storage_Git.encode(message.store.git, writer.uint32(26).fork()).ldelim();
        }
        if (message.store?.$case === "blob") {
            exports.ServerLaunch_Features_Storage_Blob.encode(message.store.blob, writer.uint32(34).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseServerLaunch_Features_Storage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.driver = reader.string();
                    break;
                case 2:
                    message.store = {
                        $case: "disk",
                        disk: exports.ServerLaunch_Features_Storage_Disk.decode(reader, reader.uint32()),
                    };
                    break;
                case 3:
                    message.store = {
                        $case: "git",
                        git: exports.ServerLaunch_Features_Storage_Git.decode(reader, reader.uint32()),
                    };
                    break;
                case 4:
                    message.store = {
                        $case: "blob",
                        blob: exports.ServerLaunch_Features_Storage_Blob.decode(reader, reader.uint32()),
                    };
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
};
function createBaseServerLaunch_Features_Storage_Disk() {
    return { watch: false };
}
exports.ServerLaunch_Features_Storage_Disk = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.watch === true) {
            writer.uint32(8).bool(message.watch);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseServerLaunch_Features_Storage_Disk();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.watch = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
};
function createBaseServerLaunch_Features_Storage_Git() {
    return { protocol: "", auth: false, pollInterval: undefined };
}
exports.ServerLaunch_Features_Storage_Git = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.protocol !== "") {
            writer.uint32(10).string(message.protocol);
        }
        if (message.auth === true) {
            writer.uint32(16).bool(message.auth);
        }
        if (message.pollInterval !== undefined) {
            duration_1.Duration.encode(message.pollInterval, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseServerLaunch_Features_Storage_Git();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.protocol = reader.string();
                    break;
                case 2:
                    message.auth = reader.bool();
                    break;
                case 3:
                    message.pollInterval = duration_1.Duration.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
};
function createBaseServerLaunch_Features_Storage_Blob() {
    return { provider: "", pollInterval: undefined };
}
exports.ServerLaunch_Features_Storage_Blob = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.provider !== "") {
            writer.uint32(10).string(message.provider);
        }
        if (message.pollInterval !== undefined) {
            duration_1.Duration.encode(message.pollInterval, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseServerLaunch_Features_Storage_Blob();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.provider = reader.string();
                    break;
                case 2:
                    message.pollInterval = duration_1.Duration.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
};
function createBaseServerLaunch_Stats() {
    return { policy: undefined, schema: undefined };
}
exports.ServerLaunch_Stats = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.policy !== undefined) {
            exports.ServerLaunch_Stats_Policy.encode(message.policy, writer.uint32(10).fork()).ldelim();
        }
        if (message.schema !== undefined) {
            exports.ServerLaunch_Stats_Schema.encode(message.schema, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseServerLaunch_Stats();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.policy = exports.ServerLaunch_Stats_Policy.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.schema = exports.ServerLaunch_Stats_Schema.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
};
function createBaseServerLaunch_Stats_Policy() {
    return { count: {}, avgRuleCount: {}, avgConditionCount: {} };
}
exports.ServerLaunch_Stats_Policy = {
    encode(message, writer = _m0.Writer.create()) {
        Object.entries(message.count).forEach(([key, value]) => {
            exports.ServerLaunch_Stats_Policy_CountEntry.encode({ key: key, value }, writer.uint32(10).fork()).ldelim();
        });
        Object.entries(message.avgRuleCount).forEach(([key, value]) => {
            exports.ServerLaunch_Stats_Policy_AvgRuleCountEntry.encode({ key: key, value }, writer.uint32(18).fork()).ldelim();
        });
        Object.entries(message.avgConditionCount).forEach(([key, value]) => {
            exports.ServerLaunch_Stats_Policy_AvgConditionCountEntry.encode({ key: key, value }, writer.uint32(26).fork()).ldelim();
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseServerLaunch_Stats_Policy();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    const entry1 = exports.ServerLaunch_Stats_Policy_CountEntry.decode(reader, reader.uint32());
                    if (entry1.value !== undefined) {
                        message.count[entry1.key] = entry1.value;
                    }
                    break;
                case 2:
                    const entry2 = exports.ServerLaunch_Stats_Policy_AvgRuleCountEntry.decode(reader, reader.uint32());
                    if (entry2.value !== undefined) {
                        message.avgRuleCount[entry2.key] = entry2.value;
                    }
                    break;
                case 3:
                    const entry3 = exports.ServerLaunch_Stats_Policy_AvgConditionCountEntry.decode(reader, reader.uint32());
                    if (entry3.value !== undefined) {
                        message.avgConditionCount[entry3.key] = entry3.value;
                    }
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
};
function createBaseServerLaunch_Stats_Policy_CountEntry() {
    return { key: "", value: 0 };
}
exports.ServerLaunch_Stats_Policy_CountEntry = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== 0) {
            writer.uint32(16).uint32(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseServerLaunch_Stats_Policy_CountEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
};
function createBaseServerLaunch_Stats_Policy_AvgRuleCountEntry() {
    return { key: "", value: 0 };
}
exports.ServerLaunch_Stats_Policy_AvgRuleCountEntry = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== 0) {
            writer.uint32(17).double(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseServerLaunch_Stats_Policy_AvgRuleCountEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = reader.double();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
};
function createBaseServerLaunch_Stats_Policy_AvgConditionCountEntry() {
    return { key: "", value: 0 };
}
exports.ServerLaunch_Stats_Policy_AvgConditionCountEntry = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== 0) {
            writer.uint32(17).double(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseServerLaunch_Stats_Policy_AvgConditionCountEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = reader.double();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
};
function createBaseServerLaunch_Stats_Schema() {
    return { count: 0 };
}
exports.ServerLaunch_Stats_Schema = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.count !== 0) {
            writer.uint32(8).uint32(message.count);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseServerLaunch_Stats_Schema();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.count = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
};
function createBaseServerStop() {
    return { version: "", uptime: undefined, requestsTotal: 0 };
}
exports.ServerStop = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.version !== "") {
            writer.uint32(10).string(message.version);
        }
        if (message.uptime !== undefined) {
            duration_1.Duration.encode(message.uptime, writer.uint32(18).fork()).ldelim();
        }
        if (message.requestsTotal !== 0) {
            writer.uint32(24).uint64(message.requestsTotal);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseServerStop();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.version = reader.string();
                    break;
                case 2:
                    message.uptime = duration_1.Duration.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.requestsTotal = longToNumber(reader.uint64());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
};
function createBaseEvent() {
    return { data: undefined };
}
exports.Event = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.data?.$case === "apiActivity") {
            exports.Event_ApiActivity.encode(message.data.apiActivity, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.data = {
                        $case: "apiActivity",
                        apiActivity: exports.Event_ApiActivity.decode(reader, reader.uint32()),
                    };
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
};
function createBaseEvent_CountStat() {
    return { key: "", count: 0 };
}
exports.Event_CountStat = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.count !== 0) {
            writer.uint32(16).uint64(message.count);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEvent_CountStat();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.count = longToNumber(reader.uint64());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
};
function createBaseEvent_ApiActivity() {
    return { version: "", uptime: undefined, methodCalls: [], userAgents: [] };
}
exports.Event_ApiActivity = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.version !== "") {
            writer.uint32(10).string(message.version);
        }
        if (message.uptime !== undefined) {
            duration_1.Duration.encode(message.uptime, writer.uint32(18).fork()).ldelim();
        }
        for (const v of message.methodCalls) {
            exports.Event_CountStat.encode(v, writer.uint32(26).fork()).ldelim();
        }
        for (const v of message.userAgents) {
            exports.Event_CountStat.encode(v, writer.uint32(34).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEvent_ApiActivity();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.version = reader.string();
                    break;
                case 2:
                    message.uptime = duration_1.Duration.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.methodCalls.push(exports.Event_CountStat.decode(reader, reader.uint32()));
                    break;
                case 4:
                    message.userAgents.push(exports.Event_CountStat.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
};
var globalThis = (() => {
    if (typeof globalThis !== "undefined")
        return globalThis;
    if (typeof self !== "undefined")
        return self;
    if (typeof window !== "undefined")
        return window;
    if (typeof global !== "undefined")
        return global;
    throw "Unable to locate global object";
})();
function longToNumber(long) {
    if (long.gt(Number.MAX_SAFE_INTEGER)) {
        throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    return long.toNumber();
}
if (_m0.util.Long !== long_1.default) {
    _m0.util.Long = long_1.default;
    _m0.configure();
}
//# sourceMappingURL=telemetry.js.map