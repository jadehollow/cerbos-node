import { Duration } from "../../../google/protobuf/duration";
import * as _m0 from "protobufjs/minimal";
export declare const protobufPackage = "cerbos.telemetry.v1";
export interface ServerLaunch {
    version: string;
    source: ServerLaunch_Source | undefined;
    features: ServerLaunch_Features | undefined;
    stats: ServerLaunch_Stats | undefined;
}
export interface ServerLaunch_Cerbos {
    version: string;
    commit: string;
    buildDate: string;
    moduleVersion: string;
    moduleChecksum: string;
}
export interface ServerLaunch_Source {
    cerbos: ServerLaunch_Cerbos | undefined;
    os: string;
    arch: string;
    numCpus: number;
}
export interface ServerLaunch_Features {
    audit: ServerLaunch_Features_Audit | undefined;
    schema: ServerLaunch_Features_Schema | undefined;
    adminApi: ServerLaunch_Features_AdminApi | undefined;
    storage: ServerLaunch_Features_Storage | undefined;
}
export interface ServerLaunch_Features_Audit {
    enabled: boolean;
    backend: string;
}
export interface ServerLaunch_Features_Schema {
    enforcement: string;
}
export interface ServerLaunch_Features_AdminApi {
    enabled: boolean;
}
export interface ServerLaunch_Features_Storage {
    driver: string;
    store?: {
        $case: "disk";
        disk: ServerLaunch_Features_Storage_Disk;
    } | {
        $case: "git";
        git: ServerLaunch_Features_Storage_Git;
    } | {
        $case: "blob";
        blob: ServerLaunch_Features_Storage_Blob;
    };
}
export interface ServerLaunch_Features_Storage_Disk {
    watch: boolean;
}
export interface ServerLaunch_Features_Storage_Git {
    protocol: string;
    auth: boolean;
    pollInterval: Duration | undefined;
}
export interface ServerLaunch_Features_Storage_Blob {
    provider: string;
    pollInterval: Duration | undefined;
}
export interface ServerLaunch_Stats {
    policy: ServerLaunch_Stats_Policy | undefined;
    schema: ServerLaunch_Stats_Schema | undefined;
}
export interface ServerLaunch_Stats_Policy {
    count: {
        [key: string]: number;
    };
    avgRuleCount: {
        [key: string]: number;
    };
    avgConditionCount: {
        [key: string]: number;
    };
}
export interface ServerLaunch_Stats_Policy_CountEntry {
    key: string;
    value: number;
}
export interface ServerLaunch_Stats_Policy_AvgRuleCountEntry {
    key: string;
    value: number;
}
export interface ServerLaunch_Stats_Policy_AvgConditionCountEntry {
    key: string;
    value: number;
}
export interface ServerLaunch_Stats_Schema {
    count: number;
}
export interface ServerStop {
    version: string;
    uptime: Duration | undefined;
    requestsTotal: number;
}
export interface Event {
    data?: {
        $case: "apiActivity";
        apiActivity: Event_ApiActivity;
    };
}
export interface Event_CountStat {
    key: string;
    count: number;
}
export interface Event_ApiActivity {
    version: string;
    uptime: Duration | undefined;
    methodCalls: Event_CountStat[];
    userAgents: Event_CountStat[];
}
export declare const ServerLaunch: {
    encode(message: ServerLaunch, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ServerLaunch;
};
export declare const ServerLaunch_Cerbos: {
    encode(message: ServerLaunch_Cerbos, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ServerLaunch_Cerbos;
};
export declare const ServerLaunch_Source: {
    encode(message: ServerLaunch_Source, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ServerLaunch_Source;
};
export declare const ServerLaunch_Features: {
    encode(message: ServerLaunch_Features, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ServerLaunch_Features;
};
export declare const ServerLaunch_Features_Audit: {
    encode(message: ServerLaunch_Features_Audit, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ServerLaunch_Features_Audit;
};
export declare const ServerLaunch_Features_Schema: {
    encode(message: ServerLaunch_Features_Schema, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ServerLaunch_Features_Schema;
};
export declare const ServerLaunch_Features_AdminApi: {
    encode(message: ServerLaunch_Features_AdminApi, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ServerLaunch_Features_AdminApi;
};
export declare const ServerLaunch_Features_Storage: {
    encode(message: ServerLaunch_Features_Storage, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ServerLaunch_Features_Storage;
};
export declare const ServerLaunch_Features_Storage_Disk: {
    encode(message: ServerLaunch_Features_Storage_Disk, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ServerLaunch_Features_Storage_Disk;
};
export declare const ServerLaunch_Features_Storage_Git: {
    encode(message: ServerLaunch_Features_Storage_Git, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ServerLaunch_Features_Storage_Git;
};
export declare const ServerLaunch_Features_Storage_Blob: {
    encode(message: ServerLaunch_Features_Storage_Blob, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ServerLaunch_Features_Storage_Blob;
};
export declare const ServerLaunch_Stats: {
    encode(message: ServerLaunch_Stats, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ServerLaunch_Stats;
};
export declare const ServerLaunch_Stats_Policy: {
    encode(message: ServerLaunch_Stats_Policy, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ServerLaunch_Stats_Policy;
};
export declare const ServerLaunch_Stats_Policy_CountEntry: {
    encode(message: ServerLaunch_Stats_Policy_CountEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ServerLaunch_Stats_Policy_CountEntry;
};
export declare const ServerLaunch_Stats_Policy_AvgRuleCountEntry: {
    encode(message: ServerLaunch_Stats_Policy_AvgRuleCountEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ServerLaunch_Stats_Policy_AvgRuleCountEntry;
};
export declare const ServerLaunch_Stats_Policy_AvgConditionCountEntry: {
    encode(message: ServerLaunch_Stats_Policy_AvgConditionCountEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ServerLaunch_Stats_Policy_AvgConditionCountEntry;
};
export declare const ServerLaunch_Stats_Schema: {
    encode(message: ServerLaunch_Stats_Schema, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ServerLaunch_Stats_Schema;
};
export declare const ServerStop: {
    encode(message: ServerStop, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ServerStop;
};
export declare const Event: {
    encode(message: Event, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Event;
};
export declare const Event_CountStat: {
    encode(message: Event_CountStat, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Event_CountStat;
};
export declare const Event_ApiActivity: {
    encode(message: Event_ApiActivity, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Event_ApiActivity;
};
//# sourceMappingURL=telemetry.d.ts.map