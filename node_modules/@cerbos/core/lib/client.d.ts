import type { _RPCs, _Request, _Response } from "./rpcs";
import type { CheckResourceRequest, CheckResourcesRequest, CheckResourcesResponse, CheckResourcesResult, IsAllowedRequest, PlanResourcesRequest, PlanResourcesResponse, ServerInfo, ValidationFailedCallback } from "./types";
/** @internal */
export declare type _Transport = <RPC extends keyof _RPCs>(rpc: RPC, request: _Request<RPC>) => Promise<_Response<RPC>>;
/**
 * Options for creating a new {@link Client}.
 *
 * @public
 */
export interface Options {
    /**
     * Action to take when input fails schema validation.
     *
     * @remarks
     * Possible values are
     *
     * - `"throw"`, to throw a {@link ValidationFailed} error;
     *
     * - a {@link ValidationFailedCallback} function; or
     *
     * - `undefined`, to return the validation errors in the response.
     *
     * @defaultValue `undefined`
     */
    onValidationError?: "throw" | ValidationFailedCallback | undefined;
    /**
     * Identifier of the playground instance to use when prototyping against the hosted demo policy decision point.
     *
     * @defaultValue `undefined`
     */
    playgroundInstance?: string | undefined;
}
/**
 * Base implementation of a client for interacting with the Cerbos policy decision point server.
 *
 * @public
 */
export declare abstract class Client {
    private readonly transport;
    private readonly options;
    /** @internal */
    protected constructor(transport: _Transport, options: Options);
    /**
     * Check a principal's permissions on a resource.
     *
     * @example
     * ```typescript
     * const decision = await cerbos.checkResource({
     *   principal: { id: "user@example.com", roles: ["USER"] },
     *   resource: { kind: "document", id: "1" },
     *   actions: ["view", "edit"],
     * });
     *
     * decision.isAllowed("view"); // => true
     * ```
     */
    checkResource(request: CheckResourceRequest): Promise<CheckResourcesResult>;
    /**
     * Check a principal's permissions on a set of resources.
     *
     * @example
     * ```typescript
     * const decision = await cerbos.checkResources({
     *   principal: { id: "user@example.com", roles: ["USER"] },
     *   resources: [
     *     {
     *       resource: { kind: "document", id: "1" },
     *       actions: ["view", "edit"],
     *     },
     *     {
     *       resource: { kind: "image", id: "1" },
     *       actions: ["delete"],
     *     },
     *   ],
     * });
     *
     * decision.isAllowed({
     *   resource: { kind: "document", id: "1" },
     *   action: "view",
     * }); // => true
     * ```
     */
    checkResources(request: CheckResourcesRequest): Promise<CheckResourcesResponse>;
    /**
     * Check if a principal is allowed to perform an action on a resource.
     *
     * @example
     * ```typescript
     * await cerbos.isAllowed({
     *   principal: { id: "user@example.com", roles: ["USER"] },
     *   resource: { kind: "document", id: "1" },
     *   action: "view",
     * }); // => true
     * ```
     */
    isAllowed(request: IsAllowedRequest): Promise<boolean>;
    /**
     * Produce a query plan that can be used to obtain a list of resources on which a principal is allowed to perform a particular action.
     *
     * @example
     * ```typescript
     * const plan = await cerbos.planResources({
     *   principal: { id: "user@example.com", roles: ["USER"] },
     *   resource: { kind: "document" },
     * });
     * ```
     */
    planResources(request: PlanResourcesRequest): Promise<PlanResourcesResponse>;
    /**
     * Retrieve information about the Cerbos policy decision point server.
     */
    serverInfo(): Promise<ServerInfo>;
    private handleValidationErrors;
}
//# sourceMappingURL=client.d.ts.map