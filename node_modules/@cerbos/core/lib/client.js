"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
const fromProtobuf_1 = require("./convert/fromProtobuf");
const toProtobuf_1 = require("./convert/toProtobuf");
const errors_1 = require("./errors");
/**
 * Base implementation of a client for interacting with the Cerbos policy decision point server.
 *
 * @public
 */
class Client {
    /** @internal */
    constructor(transport, options) {
        this.transport = transport;
        this.options = options;
    }
    /**
     * Check a principal's permissions on a resource.
     *
     * @example
     * ```typescript
     * const decision = await cerbos.checkResource({
     *   principal: { id: "user@example.com", roles: ["USER"] },
     *   resource: { kind: "document", id: "1" },
     *   actions: ["view", "edit"],
     * });
     *
     * decision.isAllowed("view"); // => true
     * ```
     */
    async checkResource(request) {
        const { resource, actions, ...rest } = request;
        const response = await this.checkResources({
            resources: [{ resource, actions }],
            ...rest,
        });
        const result = response.findResult(resource);
        if (!result) {
            throw new Error("No decision returned for resource");
        }
        return result;
    }
    /**
     * Check a principal's permissions on a set of resources.
     *
     * @example
     * ```typescript
     * const decision = await cerbos.checkResources({
     *   principal: { id: "user@example.com", roles: ["USER"] },
     *   resources: [
     *     {
     *       resource: { kind: "document", id: "1" },
     *       actions: ["view", "edit"],
     *     },
     *     {
     *       resource: { kind: "image", id: "1" },
     *       actions: ["delete"],
     *     },
     *   ],
     * });
     *
     * decision.isAllowed({
     *   resource: { kind: "document", id: "1" },
     *   action: "view",
     * }); // => true
     * ```
     */
    async checkResources(request) {
        const response = (0, fromProtobuf_1.checkResourcesResponseFromProtobuf)(await this.transport("checkResources", (0, toProtobuf_1.checkResourcesRequestToProtobuf)(request)));
        this.handleValidationErrors(response);
        return response;
    }
    /**
     * Check if a principal is allowed to perform an action on a resource.
     *
     * @example
     * ```typescript
     * await cerbos.isAllowed({
     *   principal: { id: "user@example.com", roles: ["USER"] },
     *   resource: { kind: "document", id: "1" },
     *   action: "view",
     * }); // => true
     * ```
     */
    async isAllowed(request) {
        const { action, ...rest } = request;
        const result = await this.checkResource({ actions: [action], ...rest });
        const allowed = result.isAllowed(action);
        if (allowed === undefined) {
            throw new Error("No decision returned for action");
        }
        return allowed;
    }
    /**
     * Produce a query plan that can be used to obtain a list of resources on which a principal is allowed to perform a particular action.
     *
     * @example
     * ```typescript
     * const plan = await cerbos.planResources({
     *   principal: { id: "user@example.com", roles: ["USER"] },
     *   resource: { kind: "document" },
     * });
     * ```
     */
    async planResources(request) {
        const response = (0, fromProtobuf_1.planResourcesResponseFromProtobuf)(await this.transport("planResources", (0, toProtobuf_1.planResourcesRequestToProtobuf)(request)));
        this.handleValidationErrors(response);
        return response;
    }
    /**
     * Retrieve information about the Cerbos policy decision point server.
     */
    serverInfo() {
        return this.transport("serverInfo", {});
    }
    handleValidationErrors({ validationErrors, }) {
        const { onValidationError } = this.options;
        if (onValidationError) {
            if (validationErrors.length > 0) {
                if (onValidationError === "throw") {
                    throw new errors_1.ValidationFailed(validationErrors);
                }
                onValidationError(validationErrors);
            }
        }
    }
}
exports.Client = Client;
//# sourceMappingURL=client.js.map